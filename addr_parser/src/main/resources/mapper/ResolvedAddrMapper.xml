<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Wed Jun 01 10:54:56 CST 2016-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lezhi.app.mapper.ResolvedAddrMapper">

    <resultMap id="ResolvedAddressMap" type="com.lezhi.app.model.ResolvedAddress">
        <id column="id" property="id" />
        <result column="ref_id" property="refId" />
        <result column="src" property="src" />
        <result column="address" property="oriAddress" />
        <result column="residence" property="residence" />
        <result column="building" property="building" />
        <result column="room" property="room" />
        <result column="area" property="area" />
        <result column="residence_id" property="residenceId" />
        <result column="building_id" property="buildingId" />
        <result column="is_deal" property="isDeal" />
        <result column="parsed_score" property="parsedScore" />
    </resultMap>

    <select id="find" resultMap="ResolvedAddressMap">
        select t.id, t.ref_id, t.address, t.residence, t.building, t.room, t.residence_id, t.src,t.parsed_score
        from `${tn}` t where
        (
        <foreach collection="keywords" item="keyword" separator="or">
            t.address like '%${keyword}%'
        </foreach>
        )
        <if test="building != null">
            and t.building like '%${building}%'
        </if>
        <if test="room != null">
            and t.room like '%${room}%'
        </if>
        order by t.residence, t.building, t.room
    </select>

    <select id="findAll" resultMap="ResolvedAddressMap">
        select t.id, t.ref_id, t.address, t.residence, t.building, t.room, t.residence_id, t.src,t.area,t.is_deal,t.parsed_score
        from `${tn}` t
    </select>

    <select id="findAllWithBuilding" resultMap="ResolvedAddressMap">
        select t.id, t.ref_id, t.address, t.residence, t.building, t.room, t.residence_id, t.building_id, t.area as area, t.src,t.area,t.is_deal,t.parsed_score
        from `${tn}` t
    </select>

    <select id="findByResidences" resultMap="ResolvedAddressMap">
        select t.id, t.ref_id, t.address, t.residence, t.building, t.room, t.residence_id, t.area as area, t.src,t.parsed_score
        from `${tn}` t where
        t.residence_id IN (
        <foreach collection="rids" item="rid" separator=",">
            #{rid}
        </foreach>
        )
        <if test="building != null">
            and t.building like '%${building}%'
        </if>
        <if test="room != null">
            and t.room like '%${room}%'
        </if>
        order by t.residence, t.building, t.room
    </select>

    <select id="count" resultType="java.lang.Integer">
        select count(1) from `${tn}` t where
        (
        <foreach collection="keywords" item="keyword" separator="or">
            t.address like '%${keyword}%'
        </foreach>
        )
        <if test="building != null">
            and t.building like '%${building}%'
        </if>
        <if test="room != null">
            and t.room like '%${room}%'
        </if>
    </select>

    <select id="countAll" resultType="java.lang.Integer">
        select count(1) from `${tn}` t
    </select>

    <select id="countByResidences" resultType="java.lang.Integer">
        select count(1) from `${tn}` t where
        t.residence_id IN (
        <foreach collection="rids" item="rid" separator=",">
            #{rid}
        </foreach>
        )
        <if test="building != null">
            and t.building like '%${building}%'
        </if>
        <if test="room != null">
            and t.room like '%${room}%'
        </if>
    </select>

    <update id="fillRid">
        <foreach collection="addressList" item="r" separator=";">
            update `${tn}` set residence_id = #{r.residenceId} where id = #{r.id}
        </foreach>
    </update>

    <delete id="truncateTable">
        truncate `${tn}`
    </delete>
</mapper>